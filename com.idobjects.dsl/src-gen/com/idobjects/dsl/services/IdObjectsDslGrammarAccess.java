/*
* generated by Xtext
*/

package com.idobjects.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class IdObjectsDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cPackagesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPackagesPackageParserRuleCall_0 = (RuleCall)cPackagesAssignment.eContents().get(0);
		
		//Model:
		//	packages+=Package*;
		public ParserRule getRule() { return rule; }

		//packages+=Package*
		public Assignment getPackagesAssignment() { return cPackagesAssignment; }

		//Package
		public RuleCall getPackagesPackageParserRuleCall_0() { return cPackagesPackageParserRuleCall_0; }
	}

	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePackageNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEntitiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEntitiesEntityParserRuleCall_3_0 = (RuleCall)cEntitiesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Package:
		//	"package" name=PackageName "{" entities+=Entity* "}";
		public ParserRule getRule() { return rule; }

		//"package" name=PackageName "{" entities+=Entity* "}"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=PackageName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//PackageName
		public RuleCall getNamePackageNameParserRuleCall_1_0() { return cNamePackageNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//entities+=Entity*
		public Assignment getEntitiesAssignment_3() { return cEntitiesAssignment_3; }

		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_3_0() { return cEntitiesEntityParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cPropertiesAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cPropertiesEntityPropertyParserRuleCall_3_0_0 = (RuleCall)cPropertiesAssignment_3_0.eContents().get(0);
		private final Assignment cReferencesAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cReferencesEntityReferenceParserRuleCall_3_1_0 = (RuleCall)cReferencesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Entity:
		//	"entity" name=ID "{" (properties+=EntityProperty | references+=EntityReference)* "}";
		public ParserRule getRule() { return rule; }

		//"entity" name=ID "{" (properties+=EntityProperty | references+=EntityReference)* "}"
		public Group getGroup() { return cGroup; }

		//"entity"
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(properties+=EntityProperty | references+=EntityReference)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//properties+=EntityProperty
		public Assignment getPropertiesAssignment_3_0() { return cPropertiesAssignment_3_0; }

		//EntityProperty
		public RuleCall getPropertiesEntityPropertyParserRuleCall_3_0_0() { return cPropertiesEntityPropertyParserRuleCall_3_0_0; }

		//references+=EntityReference
		public Assignment getReferencesAssignment_3_1() { return cReferencesAssignment_3_1; }

		//EntityReference
		public RuleCall getReferencesEntityReferenceParserRuleCall_3_1_0() { return cReferencesEntityReferenceParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class EntityReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cListKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cListDestinationAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final CrossReference cListDestinationEntityCrossReference_0_0_1_0 = (CrossReference)cListDestinationAssignment_0_0_1.eContents().get(0);
		private final RuleCall cListDestinationEntityIDTerminalRuleCall_0_0_1_0_1 = (RuleCall)cListDestinationEntityCrossReference_0_0_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cSingleDestinationAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final CrossReference cSingleDestinationEntityCrossReference_0_1_0 = (CrossReference)cSingleDestinationAssignment_0_1.eContents().get(0);
		private final RuleCall cSingleDestinationEntityIDTerminalRuleCall_0_1_0_1 = (RuleCall)cSingleDestinationEntityCrossReference_0_1_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInverseKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInverseNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInverseNameIDTerminalRuleCall_2_1_0 = (RuleCall)cInverseNameAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EntityReference:
		//	("List[" listDestination=[Entity] "]" | singleDestination=[Entity]) name=ID ("[inverse=" inverseName=ID "]")? ";";
		public ParserRule getRule() { return rule; }

		//("List[" listDestination=[Entity] "]" | singleDestination=[Entity]) name=ID ("[inverse=" inverseName=ID "]")? ";"
		public Group getGroup() { return cGroup; }

		//"List[" listDestination=[Entity] "]" | singleDestination=[Entity]
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"List[" listDestination=[Entity] "]"
		public Group getGroup_0_0() { return cGroup_0_0; }

		//"List["
		public Keyword getListKeyword_0_0_0() { return cListKeyword_0_0_0; }

		//listDestination=[Entity]
		public Assignment getListDestinationAssignment_0_0_1() { return cListDestinationAssignment_0_0_1; }

		//[Entity]
		public CrossReference getListDestinationEntityCrossReference_0_0_1_0() { return cListDestinationEntityCrossReference_0_0_1_0; }

		//ID
		public RuleCall getListDestinationEntityIDTerminalRuleCall_0_0_1_0_1() { return cListDestinationEntityIDTerminalRuleCall_0_0_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_0_2() { return cRightSquareBracketKeyword_0_0_2; }

		//singleDestination=[Entity]
		public Assignment getSingleDestinationAssignment_0_1() { return cSingleDestinationAssignment_0_1; }

		//[Entity]
		public CrossReference getSingleDestinationEntityCrossReference_0_1_0() { return cSingleDestinationEntityCrossReference_0_1_0; }

		//ID
		public RuleCall getSingleDestinationEntityIDTerminalRuleCall_0_1_0_1() { return cSingleDestinationEntityIDTerminalRuleCall_0_1_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("[inverse=" inverseName=ID "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"[inverse="
		public Keyword getInverseKeyword_2_0() { return cInverseKeyword_2_0; }

		//inverseName=ID
		public Assignment getInverseNameAssignment_2_1() { return cInverseNameAssignment_2_1; }

		//ID
		public RuleCall getInverseNameIDTerminalRuleCall_2_1_0() { return cInverseNameIDTerminalRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class AbstractReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractReference");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//AbstractReference:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class EntityPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPropertyTypeBasicTypeParserRuleCall_0_0 = (RuleCall)cPropertyTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//EntityProperty:
		//	propertyType=BasicType name=ID ";";
		public ParserRule getRule() { return rule; }

		//propertyType=BasicType name=ID ";"
		public Group getGroup() { return cGroup; }

		//propertyType=BasicType
		public Assignment getPropertyTypeAssignment_0() { return cPropertyTypeAssignment_0; }

		//BasicType
		public RuleCall getPropertyTypeBasicTypeParserRuleCall_0_0() { return cPropertyTypeBasicTypeParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class PackageNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//PackageName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class BasicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWrapperTypesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDirectSupportedTypesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BasicType:
		//	PrimitiveTypes | WrapperTypes | DirectSupportedTypes;
		public ParserRule getRule() { return rule; }

		//PrimitiveTypes | WrapperTypes | DirectSupportedTypes
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimitiveTypes
		public RuleCall getPrimitiveTypesParserRuleCall_0() { return cPrimitiveTypesParserRuleCall_0; }

		//WrapperTypes
		public RuleCall getWrapperTypesParserRuleCall_1() { return cWrapperTypesParserRuleCall_1; }

		//DirectSupportedTypes
		public RuleCall getDirectSupportedTypesParserRuleCall_2() { return cDirectSupportedTypesParserRuleCall_2; }
	}

	public class DirectSupportedTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DirectSupportedTypes");
		private final Keyword cStringKeyword = (Keyword)rule.eContents().get(1);
		
		//DirectSupportedTypes:
		//	"String";
		public ParserRule getRule() { return rule; }

		//"String"
		public Keyword getStringKeyword() { return cStringKeyword; }
	}

	public class WrapperTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WrapperTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cByteKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cShortKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIntegerKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLongKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cFloatKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cDoubleKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cBooleanKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cCharacterKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//WrapperTypes:
		//	"Byte" | "Short" | "Integer" | "Long" | "Float" | "Double" | "Boolean" | "Character";
		public ParserRule getRule() { return rule; }

		//"Byte" | "Short" | "Integer" | "Long" | "Float" | "Double" | "Boolean" | "Character"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Byte"
		public Keyword getByteKeyword_0() { return cByteKeyword_0; }

		//"Short"
		public Keyword getShortKeyword_1() { return cShortKeyword_1; }

		//"Integer"
		public Keyword getIntegerKeyword_2() { return cIntegerKeyword_2; }

		//"Long"
		public Keyword getLongKeyword_3() { return cLongKeyword_3; }

		//"Float"
		public Keyword getFloatKeyword_4() { return cFloatKeyword_4; }

		//"Double"
		public Keyword getDoubleKeyword_5() { return cDoubleKeyword_5; }

		//"Boolean"
		public Keyword getBooleanKeyword_6() { return cBooleanKeyword_6; }

		//"Character"
		public Keyword getCharacterKeyword_7() { return cCharacterKeyword_7; }
	}

	public class PrimitiveTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cByteKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cShortKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIntKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLongKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cFloatKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cDoubleKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cBooleanKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cCharKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//PrimitiveTypes:
		//	"byte" | "short" | "int" | "long" | "float" | "double" | "boolean" | "char";
		public ParserRule getRule() { return rule; }

		//"byte" | "short" | "int" | "long" | "float" | "double" | "boolean" | "char"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"byte"
		public Keyword getByteKeyword_0() { return cByteKeyword_0; }

		//"short"
		public Keyword getShortKeyword_1() { return cShortKeyword_1; }

		//"int"
		public Keyword getIntKeyword_2() { return cIntKeyword_2; }

		//"long"
		public Keyword getLongKeyword_3() { return cLongKeyword_3; }

		//"float"
		public Keyword getFloatKeyword_4() { return cFloatKeyword_4; }

		//"double"
		public Keyword getDoubleKeyword_5() { return cDoubleKeyword_5; }

		//"boolean"
		public Keyword getBooleanKeyword_6() { return cBooleanKeyword_6; }

		//"char"
		public Keyword getCharKeyword_7() { return cCharKeyword_7; }
	}
	
	
	private ModelElements pModel;
	private PackageElements pPackage;
	private EntityElements pEntity;
	private EntityReferenceElements pEntityReference;
	private AbstractReferenceElements pAbstractReference;
	private EntityPropertyElements pEntityProperty;
	private PackageNameElements pPackageName;
	private BasicTypeElements pBasicType;
	private DirectSupportedTypesElements pDirectSupportedTypes;
	private WrapperTypesElements pWrapperTypes;
	private PrimitiveTypesElements pPrimitiveTypes;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public IdObjectsDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	packages+=Package*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Package:
	//	"package" name=PackageName "{" entities+=Entity* "}";
	public PackageElements getPackageAccess() {
		return (pPackage != null) ? pPackage : (pPackage = new PackageElements());
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}

	//Entity:
	//	"entity" name=ID "{" (properties+=EntityProperty | references+=EntityReference)* "}";
	public EntityElements getEntityAccess() {
		return (pEntity != null) ? pEntity : (pEntity = new EntityElements());
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//EntityReference:
	//	("List[" listDestination=[Entity] "]" | singleDestination=[Entity]) name=ID ("[inverse=" inverseName=ID "]")? ";";
	public EntityReferenceElements getEntityReferenceAccess() {
		return (pEntityReference != null) ? pEntityReference : (pEntityReference = new EntityReferenceElements());
	}
	
	public ParserRule getEntityReferenceRule() {
		return getEntityReferenceAccess().getRule();
	}

	//AbstractReference:
	//	name=ID;
	public AbstractReferenceElements getAbstractReferenceAccess() {
		return (pAbstractReference != null) ? pAbstractReference : (pAbstractReference = new AbstractReferenceElements());
	}
	
	public ParserRule getAbstractReferenceRule() {
		return getAbstractReferenceAccess().getRule();
	}

	//EntityProperty:
	//	propertyType=BasicType name=ID ";";
	public EntityPropertyElements getEntityPropertyAccess() {
		return (pEntityProperty != null) ? pEntityProperty : (pEntityProperty = new EntityPropertyElements());
	}
	
	public ParserRule getEntityPropertyRule() {
		return getEntityPropertyAccess().getRule();
	}

	//PackageName:
	//	ID ("." ID)*;
	public PackageNameElements getPackageNameAccess() {
		return (pPackageName != null) ? pPackageName : (pPackageName = new PackageNameElements());
	}
	
	public ParserRule getPackageNameRule() {
		return getPackageNameAccess().getRule();
	}

	//BasicType:
	//	PrimitiveTypes | WrapperTypes | DirectSupportedTypes;
	public BasicTypeElements getBasicTypeAccess() {
		return (pBasicType != null) ? pBasicType : (pBasicType = new BasicTypeElements());
	}
	
	public ParserRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}

	//DirectSupportedTypes:
	//	"String";
	public DirectSupportedTypesElements getDirectSupportedTypesAccess() {
		return (pDirectSupportedTypes != null) ? pDirectSupportedTypes : (pDirectSupportedTypes = new DirectSupportedTypesElements());
	}
	
	public ParserRule getDirectSupportedTypesRule() {
		return getDirectSupportedTypesAccess().getRule();
	}

	//WrapperTypes:
	//	"Byte" | "Short" | "Integer" | "Long" | "Float" | "Double" | "Boolean" | "Character";
	public WrapperTypesElements getWrapperTypesAccess() {
		return (pWrapperTypes != null) ? pWrapperTypes : (pWrapperTypes = new WrapperTypesElements());
	}
	
	public ParserRule getWrapperTypesRule() {
		return getWrapperTypesAccess().getRule();
	}

	//PrimitiveTypes:
	//	"byte" | "short" | "int" | "long" | "float" | "double" | "boolean" | "char";
	public PrimitiveTypesElements getPrimitiveTypesAccess() {
		return (pPrimitiveTypes != null) ? pPrimitiveTypes : (pPrimitiveTypes = new PrimitiveTypesElements());
	}
	
	public ParserRule getPrimitiveTypesRule() {
		return getPrimitiveTypesAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
